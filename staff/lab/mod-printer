#!/usr/bin/env python3
"""Remove or add printers to/from CUPS classes."""
import argparse
import re
import subprocess
import sys


def modify_printer(args):
    """Perform internal call to CUPS CLI to modify class(es)."""
    # Determine which CUPS classes are available
    try:
        lpstat_out = subprocess.run(["lpstat", "-p"], check=True, \
            stdout=subprocess.PIPE, stdin=subprocess.PIPE).strip().split("\n")
    except subprocess.CalledProcessError as e:
        print("ERROR: lpstat process exited with exit code %i" % e.returncode)
        return e.returncode
    
    # Parse lpstat output for printer class names
    # Output is of the form: printer <printername> is idle. <etc>
    cups_classes = [re.search(r"printer (\S*) is", classname).group(1) for classname in lpstat_out]

    if args.verbose:
        print("Found CUPS classes: %s" % cups_classes)
    
    # Override with specified classname if provided and valid
    if args.classname:
        if args.classname in cups_classes:
            cups_classes = [args.classname]
            if args.verbose:
                print("Overriding CUPS classes with parameter: %s" % args.classname)
        else:
            print("ERROR: Specified class %s could not be found in available classes %s" % (args.classname, cups_classes))
            return 1
    
    # Perform pre-call logging and input processing
    printer = args.printer.lower()
    if args.verbose:
        print("Printer to perform action on: %s" % printer)
    action_flag = "-r" if args.action == "remove" else "-c"
    if args.verbose:
        print("Action to be performed (and flag): %s (%s)" % (args.action, action_flag))
        
    # Call lpadmin command to perform addition/removal
    for classname in cups_classes:
        action_cmd = ["lpadmin", "-p", printer + "-" + classname, action_flag, classname]
        try:
            subprocess.run(action_cmd, check=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE)
        except subprocess.CalledProcessError as e:
            print("ERROR: lpstat process exited with exit code %i" % e.returncode)
            return e.returncode
        else:
            action_out = "added to" if args.action == "add" else "removed from"
            print("Printer %s was successfully %s %s" % (printer, action_out, classname))
            

def main():
    args = argparse.ArgumentParser(description=__doc__)
    args.add_argument("action",
        choices=["add", "remove"], 
        help="Action to perform"
    )
    args.add_argument("printer", help="Name of printer to modify")
    
    args.add_argument("-c", "--classname", help="Modify only a specific class")
    args.add_argument("-v", "--verbose", "--debug", 
        action="store_true",
        help="Output more verbose logging to stdout"
    )
    
    args = args.parse_args()
    return modify_printer(args)
    

if __name__ == "__main__":
    sys.exit(main())