#!/opt/venvs/ocf-utils/bin/python3
import argparse
import functools
import sys
from datetime import date
from datetime import datetime
from datetime import timedelta

import bod
import meetings


@functools.lru_cache(maxsize=None)
def get_last_meeting(date):
    """Gets the last meeting on or before the given date.

    Args:
        date: a datetime.date object

    Returns:
        A (semester, filename) pair for the most recent meeting on or before
        the given date.
    """
    return meetings.get_prev_meeting('bod', meetings.get_semester(date),
                                     date + timedelta(days=1))


def quorum(args):
    print(bod.quorum_next(*get_last_meeting(args.date)))


def ls(args):
    for director in sorted(bod.ls(*get_last_meeting(args.date))):
        print(director)


def parse_meeting_time(str_meeting_time):
    try:
        day = datetime.strptime(str_meeting_time, '%Y-%m-%d').date()
        if day < date(2017, 8, 20):
            raise argparse.ArgumentTypeError(str_meeting_time + ' is out of '
                                             'range for this script')
        return day
    except ValueError:
        raise argparse.ArgumentTypeError(str_meeting_time + ' is not a valid '
                                         'date in YYYY-MM-DD format')


def danger(args):
    on_bod = bod.ls(*get_last_meeting(args.date))
    at_last_meeting = set(bod.get_attending_directors(*get_last_meeting(args.date)))

    for director in sorted(on_bod - at_last_meeting):
        print(director)


if __name__ == '__main__':
    commands = {
        'quorum': quorum,
        'ls': ls,
        # lists people in "danger" of being kicked off
        # i.e. people who missed last meeting on bod
        'danger': danger,
    }

    parser = argparse.ArgumentParser(description='View bod composition and information')
    parser.add_argument('command', choices=commands.keys(),
                        help=('Which command to run. Can be "quorum" to list '
                              'the quorum, "ls" to list members of BoD, or '
                              '"danger" to list directors who have missed the '
                              'last BoD meeting.'))
    parser.add_argument('date', type=parse_meeting_time, nargs='?',
                        default=date.today(),
                        help=('Display info for the given date rather than '
                              'today. The date should be given in YYYY-MM-DD '
                              'format.'))

    if len(sys.argv) == 1:
        parser.print_help()
    else:
        args = parser.parse_args()
        commands[args.command](args)
