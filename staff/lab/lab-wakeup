#!/usr/bin/env python3
"""Wake OCF lab machines via wake-on-LAN."""
import argparse
import subprocess
import sys

from ocflib.infra.hosts import hosts_by_filter
from ocflib.lab.hours import read_hours_listing


ALL_HOSTS_FILTER = '(type=desktop)'


def build_host_filter(hosts):
    assert all(host.isalnum() for host in hosts), 'invalid hostname given'
    return '(&' + ALL_HOSTS_FILTER + '(|(cn=' + ')(cn='.join(hosts) + ')))'


def wake_hosts(filter, quiet):
    subprocess.check_call(
        ['wakeonlan'] + [host['macAddress'][0] for host in hosts_by_filter(filter)],
        stdout=subprocess.DEVNULL if quiet else sys.stdout,
    )


def main(argv=None):
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-f', '--force', action='store_true',
                        help='Force wakeup, even if lab is closed')
    parser.add_argument('-q', '--quiet', action='store_true',
                        help='Be quiet on routine warnings (e.g. lab is closed)')
    parser.add_argument('host', nargs='*',
                        help='Host to wake. If not specified, wakes all desktops. Implies --force.')
    args = parser.parse_args(argv)
    force = args.force or args.host

    if force or read_hours_listing().is_open():
        wake_hosts(
            build_host_filter(args.host) if args.host else ALL_HOSTS_FILTER,
            args.quiet,
        )
    else:
        if not args.quiet:
            print(
                'Not waking anything (lab is closed); use the --force if you so desire.',
                file=sys.stderr,
            )
        return 1


if __name__ == '__main__':
    sys.exit(main())
