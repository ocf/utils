#!/usr/bin/env python3
"""Creates a MySQL database with the same name as the username of the user who
runs this program.

To prevent the user from taking control of this program and e.g., causing the
program to dump core and reveal the MySQL root password, this program should be
run under another account, preferably that of the MySQL user.

The password set for this new account is randomly generated; it is not
user-selectable. This is to prevent compromised MySQL-backed web apps from
also compromising the shell account password. Note that the MySQL server
should also be patched to prevent the user from later changing the password.

The MySQL root password and the hostname of the MySQL server are read from
a config file; the path to it is stored in the CONF_FILE global. This file
must be readable only by the setuid user! The Python configparser module
is used to parse the config file, so the format is basically the Windows
INI format.
"""
import os
import random
import string
import sys
from configparser import ConfigParser
from textwrap import dedent

import MySQLdb
from ocflib.misc.mail import send_problem_report


CREATE_QUERY = 'CREATE DATABASE {}'
GRANT_QUERY = "GRANT ALL PRIVILEGES ON {username}.* TO '{username}'@'%' IDENTIFIED BY '{userpass}'"

CONF_FILE = '/opt/share/makeservices/makemysql.conf'
MYSQL_HOST = 'mysql.ocf.berkeley.edu'

PW_LENGTH = 24

silent = False


def read_config():
    """Fetches the MySQL hostname and root password from the config in
    '/opt/share/makeservices'."""
    conf = ConfigParser()
    conf.read(CONF_FILE)
    mysql_host = conf.get('makemysql', 'host')
    mysql_root_pw = conf.get('makemysql', 'passwd')
    return mysql_host, mysql_root_pw


def intro_prompt():
    print(dedent(
        """
        This program will create a MySQL database for your account,
        if one does not already exist. A randomly-generated password
        will be assigned for access to your database. MySQL passwords
        are no longer user-selectable because of frequent occurrences of
        Unix account passwords being compromised when faulty or out-of-date
        web applications are exploited.

        The randomly-generated password will be displayed on-screen.
        Please make sure you are in an environment where nobody else will
        see it when it appears.

        If you are ready to continue, type 'yes'.
        Typing anything other than 'yes' will abort this script.
        """
    ))
    return input('Continue? ') == 'yes'


def main():
    try:
        username = os.environ.get('SUDO_USER')

        if not username:
            raise RuntimeError('Unable to read SUDO_USER.')

        # Read config file.
        mysql_host, mysql_root_pw = read_config()

        # Added a simple and stupid argument parsing so that other scripts can use it without tunneling in yes.
        if len(sys.argv) > 1 and sys.argv[1] in ['-s', '--silent']:
            silent = True
        # Check whether the script should proceed.
        if not silent and not intro_prompt():
            print('>>> Aborted by user request.', file=sys.stderr)
            return

        # Connect to the MySQL server.
        try:
            if not silent:
                print('>>> Connecting to MySQL database server...')
            connection = MySQLdb.connect(host=mysql_host,
                                         user='root',
                                         passwd=mysql_root_pw)
        except MySQLdb.MySQLError:
            raise ConnectionError('>>> Error: Failed to connect to MySQL server.')

        # Check if the database already exists.
        try:
            if not silent:
                print(">>> Checking if database '{}' already exists...".format(username))
            connection.select_db(username)

            # The database already exists, so skip the creation step.
            if not silent:
                print('yes.')
            db_create = False
            if not silent:
                print(dedent("""
                The MySQL database '{}' already exists.
                The database password will be reset.

                If you are unsure how to access or use your database, please visit

                https://www.ocf.berkeley.edu/docs/services/mysql/

                If you run into trouble trying to use your database, contact us at

                    help@ocf.berkeley.edu
                """).format(username))
        except MySQLdb.OperationalError:
            if not silent:
                print('no.')
            db_create = True

        # Add or update user database privileges.
        try:
            r = random.SystemRandom()
            userpass = ''.join(r.choice(string.ascii_letters + string.digits)
                               for _ in range(PW_LENGTH))
            query = GRANT_QUERY.format(username=username, userpass=userpass)
            connection.query(query)
            connection.store_result()
            # Result should be "Query OK, 0 rows affected",
            # but we'll assume no exception means success.
        except MySQLdb.MySQLError:
            raise ConnectionError('>>> Error: Failed to grant database privileges.')

        # Create new database, if necessary.
        if db_create:
            try:
                if not silent:
                    print(">>> Creating new database '{}'...".format(username))
                query = CREATE_QUERY.format(username)
                connection.query(query)
                connection.store_result()
                # Result should be "Query OK, 1 row affected",
                # but we'll assume no exception means success.
            except MySQLdb.MySQLError:
                raise IOError('>>> Error: Failed to create database.')

        # Database is ready for use.
        if db_create:
            if not silent:
                print(dedent("""
                Your MySQL database has been created.

                For instructions on accessing and using your database, please visit

                https://www.ocf.berkeley.edu/docs/services/mysql/

                If you run into trouble trying to use your database, contact us at

                    help@ocf.berkeley.edu
                """))

                print('>>> Your MySQL database password is: {}'.format(userpass))
            else:
                print(userpass)
    except Exception as ex:
        send_problem_report(dedent(
            """\
            Fatal error for user '{}'

            {}: {}\
            """
        ).format(username, ex.__class__.__name__, ex))
        print(dedent(
            """
            A fatal error was encountered during program execution.
            OCF staff have been notified of the problem.
            """
        ), file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    main()
