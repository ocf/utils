#!/opt/venvs/ocf-utils/bin/python3.7
"""Script for recording meeting minutes.

This script opens up an editor for taking minutes in the appropriate file.
It also performs setup and teardown operations, particularly in the case of BoD minutes.
"""
import argparse
import getpass
import os
import shutil
import subprocess
import sys
import time
from os.path import join
from string import Template

import bod
import meetings
from ocflib.misc.shell import get_editor


def minutes_setup(choice, semester, filename):
    notes = join(meetings.get_minutes_path(choice, semester=semester),
                 filename)

    # Create minutes file from template if it doesn't exist
    if not os.path.exists(notes):
        shutil.copyfile(meetings.get_template(choice), notes)
        os.chmod(notes, 0o644)

    with open(notes, 'r') as f:
        s = Template(f.read())

    # Substitute values
    subs = {'username': getpass.getuser(), 'start_time': time.strftime('%H:%M')}
    if choice == 'bod':
        subs['quorum'] = str(bod.quorum(semester, filename))
    s = s.safe_substitute(subs)

    # Write out file with substituted values
    with open(notes, 'w') as f:
        f.write(s)


def minutes_done(choice, semester, filename):
    notes = join(meetings.get_minutes_path(choice, semester=semester),
                 filename)

    # Substitute in ending values
    with open(notes, 'r') as f:
        s = Template(f.read())
    s = s.safe_substitute(end_time=time.strftime('%H:%M'))

    # Write out file with substituted values
    with open(notes, 'w') as f:
        f.write(s)

    if choice == 'bod':
        bod.split_attendance(semester, filename)


def main():
    options = meetings.get_minutes_choices()

    parser = argparse.ArgumentParser(description='Record standardized meeting minutes')
    parser.add_argument('meeting_type', metavar='MEETING-TYPE', nargs='?',
                        choices=options,
                        help='Which meeting you are recording minutes for. '
                             'If not specified, you will be prompted for one.')

    args = parser.parse_args()
    if args.meeting_type:
        choice = args.meeting_type
    else:
        print('What are you taking notes for?')
        print('Options:', ', '.join(options))
        choice = input('Enter choice: ')
        if choice not in options:
            print('Invalid choice.')
            return 1

    semester = meetings.get_semester()
    filename = meetings.get_minutes_filename()
    filepath = join(meetings.get_minutes_path(choice, semester=semester),
                    filename)
    minutes_setup(choice, semester, filename)
    subprocess.call([get_editor(), filepath])
    minutes_done(choice, semester, filename)


if __name__ == '__main__':
    sys.exit(main())
