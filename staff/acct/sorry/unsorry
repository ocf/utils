#! /bin/bash

#Script for unsorrying OCF user accounts, adapted for ldap/kerberos
#gfs, 3-24-08

LDAPMODIFY=$(command -v ldapmodify)
KINIT=$(command -v kinit)
KDESTROY=$(command -v kdestroy)

defaultshell=/bin/bash

# test for root
if [ "$(/usr/bin/id -u)" != 0 ]; then
    echo "You must be root to run this"
    exit 2
fi


# usage block
if [ -z "$1" ]; then
    echo "Usage: $0 [user to be unsorried]"
    exit 0
fi

sorriedUser=$1

if [[ ! "$sorriedUser" =~ ^[a-z0-9]+ ]]; then
    echo "$sorriedUser is an invalid username"
    exit 3
fi

if [ -z "$(getent passwd "$sorriedUser")" ]; then
    echo "User $sorriedUser does not exist"
    exit 3
fi

userdir=$(ldapsearch -x uid="$sorriedUser" | grep homeDirectory | cut -d' ' -f2)

# no home directory case
if [ -z "$userdir" ]; then
    echo "Could not find the home directory for user $sorriedUser"
    exit 2
fi

if [ ! -e "$userdir/.sorry" ]; then
    echo "WARNING: User has no .sorry file"
fi

echo "Please ensure that following attributes in LDAP are UP-TO-DATE."
echo "  for individuals   : calnetuid,  mail"
echo "  for student groups: callinkoid, mail"
echo "Press enter to continue, or Ctrl-C to abort"
read -r _

rootstaffer="$SUDO_USER"

if [ "$rootstaffer" = "root" ] || [ -z "$rootstaffer" ]; then
    echo "The sorry.log is much more useful when it logs who you are"
    echo "rather than simply 'root'. Please enter your username:"
    read -r rootstaffer
fi

echo "You are $rootstaffer"

if ! $KINIT "${rootstaffer}/admin"; then
    echo "kinit failed, bailing out!"
    exit 1
fi

# Rewriting this to use bash variable substitution is annoying and confusing, so
# just use sed instead and ignore the shellcheck warning
# shellcheck disable=SC2001
httpdir=$(echo "$sorriedUser" | sed -E 's%([a-z])[a-z]*%/services/http/users/\1/\0%')

echo ""
echo "Changing user's shell back to normal"
if [ -e "$userdir/.oldshell" ]; then
    shell=$(rev "$userdir/.oldshell" | cut -d/ -f1 | rev)
    if [ "$shell" = "tcsh" ]; then
        newshell="/bin/tcsh"
    elif [ "$shell" = "zsh" ]; then
        newshell="/bin/zsh"
    elif [ "$shell" = "csh" ]; then
        newshell="/bin/tcsh"
    elif [ "$shell" = "ksh" ]; then
        newshell="/bin/bash"
    elif [ "$shell" = "bash" ]; then
        newshell="/bin/bash"
    else
        newshell=$defaultshell
    fi
else
    echo ".oldshell file not found, setting shell to $defaultshell"
    newshell=$defaultshell
fi

echo ""
echo "Restoring ownership of passwd entry"

ocfgid=$(getent group ocf | cut -d : -f 3)
$LDAPMODIFY -H ldaps://ldap.ocf.berkeley.edu <<EOF
dn: uid=$sorriedUser,ou=People,dc=OCF,dc=Berkeley,dc=EDU
changetype: modify
replace: loginShell
loginShell: $newshell
-
replace: gidNumber
gidNumber: $ocfgid
EOF

# restoring permission to 700
chmod 700 "$userdir"

echo ""
echo "Restoring services directory permissions:"
if [ -d "$httpdir" ]; then
    chmod 755 "$httpdir"
fi

echo ""
echo "Removing .sorry and .oldshell files"

rm "$userdir/.sorry"
rm "$userdir/.oldshell"

echo ""
echo "Final system check:"
finger -m "$sorriedUser"
ldapsearch -x uid="$sorriedUser"
ls -la "$userdir"
ls -ld "$httpdir"

echo "$(/bin/date) + $rootstaffer $sorriedUser" >> /opt/acct/sorry.log

$KDESTROY

exit 0
