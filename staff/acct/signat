#!/usr/bin/env python3
"""Returns active student group information about a signatory or
student group.
"""
import argparse
import sys
import textwrap

import ocflib.account.search as search
import ocflib.ucb.directory as directory
from ocflib.misc.shell import green
from ocflib.misc.shell import red
from ocflib.misc.shell import yellow
from ocflib.ucb.groups import group_by_oid
from ocflib.ucb.groups import groups_by_student_signat
from ocflib.ucb.groups import list_groups
from ocflib.ucb.groups import signatories_for_group
from tabulate import tabulate


def print_title(title, subtitle=None):
    """Pretty print a table title for groups or individuals."""
    print(title)
    if subtitle:
        print(subtitle)
        bar_len = max(len(title), len(subtitle))
    else:
        bar_len = len(title)
    bar = '=' * bar_len
    print(bar)


def show_by_username(username):
    """Show signatory info about an individual or group account."""
    attrs = search.user_attrs(username)
    if attrs is None:
        print(red('User not found.'))
        return

    uid = attrs.get('calnetUid', None)
    oid = attrs.get('callinkOid', None)

    if uid and oid:
        print(yellow('Both CalNet UID and CalLink OID are defined for '
                     'this account.'))
        show_groups_by_student_signat(uid)
        print()
        show_signatories_for_group(oid)
    elif uid:
        show_groups_by_student_signat(uid)
    elif oid:
        show_signatories_for_group(oid)
    else:
        print(red('This account has no CalNet UID or CalLink OID.'))


def show_signatories_for_group(oid):
    """Show all signatories for a group."""
    signatories = signatories_for_group(oid)
    group = group_by_oid(oid)

    if not signatories and not group:
        print(red('CalLink OID {} not found.'.format(oid)))
        return
    elif not group:
        print(yellow(('CalLink OID {} has signatories but is currently not '
                      'active on CalLink.').format(oid)))

    if group:
        accounts = ' '.join(group['accounts']) if group['accounts'] else 'n/a'
        subtitle = '{} - Group accounts: {}'.format(
            red('Inactive Group') if group['inactive'] else green('Active Group'), accounts)
        title = '{} (OID: {} - Email: {})'.format(group['name'], oid, group['email'])
    else:
        subtitle = None
        title = '<unknown group> ({})'.format(oid)

    print_title(title, subtitle=subtitle)

    if signatories:
        columns = [(attrs['name'], uid) for uid, attrs in signatories.items()]
        headers = ('Signatory', 'UID')
        print(tabulate(columns, headers=headers))
    else:
        print('No signatories found.')


def show_groups_by_student_signat(uid):
    """Show signatory status of a person on CalLink."""
    name = directory.name_by_calnet_uid(uid)

    if not name:
        print(red('CalNet UID {} not found.').format(uid))
        return

    title = '{} ({})'.format(name, uid)
    print_title(title)

    groups = groups_by_student_signat(uid)

    if groups:
        columns = [(attrs['name'], ' '.join(attrs['accounts']) or 'n/a', oid)
                   for oid, attrs in groups.items()]
        headers = ('Group', 'Accounts', 'OID')
        print(tabulate(columns, headers=headers))
    else:
        print('Not a signatory of any student group.')


def show_signatories_by_group_name(name):
    """Show signatories of groups matching a name."""
    print('Searching for groups... ', end='', flush=True)

    groups = list_groups(name=name)

    if not groups:
        print()
        print(red('No student groups found.'))
        return

    plural_case = 'entry' if len(groups) == 1 else 'entries'

    print('Found {} {}.'.format(len(groups), plural_case))

    print('Searching for signatories...')

    for (oid, attrs) in groups.items():
        print()
        show_signatories_for_group(oid)


def show_groups_by_signat_name(name):
    """Show signatory status of people matching a name."""
    print('Searching for people... ', end='', flush=True)

    uids = directory.calnet_uids_by_name(name)

    if not uids:
        print()
        print(red('CalNet UID not found.'))
        return

    plural_case = 'entry' if len(uids) == 1 else 'entries'

    print('Found {} {}.'.format(len(uids), plural_case))

    print('Searching for signatories...')

    for uid in uids:
        print()
        show_groups_by_student_signat(uid)


def main():
    parser = argparse.ArgumentParser(
        usage='%(prog)s IDTYPE ARGS...',
        description=textwrap.dedent('''\
                Find active student groups and signatories.
                Try %(prog)s <IDTYPE> -h for more information.'''),
        formatter_class=argparse.RawDescriptionHelpFormatter)
    subparsers = parser.add_subparsers(dest='idtype', metavar='IDTYPE')
    subparsers.required = True

    UID_DESC = 'Look up the signatory status of a person by CalNet UID'
    uid_parser = subparsers.add_parser('uid', description=UID_DESC,
                                       help=UID_DESC)
    uid_parser.add_argument('uid', metavar='UID', type=int)

    OID_DESC = 'Look up the signatories of a group by CalLink OID'
    oid_parser = subparsers.add_parser('oid', description=OID_DESC,
                                       help=OID_DESC)
    oid_parser.add_argument('oid', metavar='OID', type=int)

    USER_DESC = 'For an individual account, look up the signatory status of ' \
                'the account holder. For a group account, look up the ' \
                'signatories of the group.'
    user_parser = subparsers.add_parser('user', description=USER_DESC,
                                        help=USER_DESC)
    user_parser.add_argument('username', metavar='USERNAME', type=str)

    NAME_DESC = 'Look up the signatory status of a person by name'
    name_parser = subparsers.add_parser('name', description=NAME_DESC,
                                        help=NAME_DESC)
    name_parser.add_argument('name', metavar='WORD', type=str, nargs='+',
                             help='List of full or partial names or keywords. '
                                  'Technically, each name must be matched by '
                                  "the LDAP 'cn' attribute.")

    GROUP_DESC = 'Look up the signatories of a group by group name'
    group_parser = subparsers.add_parser('group', description=GROUP_DESC,
                                         help=GROUP_DESC)
    group_parser.add_argument('name', metavar='WORD', type=str, nargs='+',
                              help='List of keywords to search for on the '
                                   'CalLink API')

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(2)

    args = parser.parse_args()
    if args.idtype == 'uid':
        show_groups_by_student_signat(args.uid)
    elif args.idtype == 'oid':
        show_signatories_for_group(args.oid)
    elif args.idtype == 'user':
        show_by_username(args.username)
    elif args.idtype == 'name':
        show_groups_by_signat_name(' '.join(args.name))
    elif args.idtype == 'group':
        show_signatories_by_group_name(' '.join(args.name))


if __name__ == '__main__':
    main()
