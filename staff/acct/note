#!/opt/venvs/ocf-utils/bin/python3
"""Add a note about a user to User_Info."""
import argparse
import collections
import getpass
import pwd
import re
import sys
import tempfile
from datetime import date


USER_INFO = '/home/s/st/staff/User_Info'

TOPICS = collections.OrderedDict([
    (r'\bban(ned)?\b', 'ban'),
    (r'\bunban(ned)?\b', 'unban'),
    (r'\bsorr(y|ied)\b', 'sorry'),
    (r'\bunsorr(y|ied)\b', 'unsorry'),
    (r'\bquota\b', 'quota'),
    (r'\b(password|pw)\b', 'password'),
    (r'\b(mail|spam)\b', 'mail'),
    (r'\bsharing\b', 'sharing'),
    (r'\b(redirect(s|ing)?|website|wordpress|public_html|\.?htaccess)\b', 'website'),
])


def guess_topic(note):
    note = note.lower()
    for regex, topic in TOPICS.items():
        if re.search(regex, note):
            return topic
    return ''


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-u', '--user', required=True, help='The username')
    parser.add_argument('-t', '--topic',
                        help='The topic of the note. Common topics include: '
                             + ', '.join(TOPICS.values()))
    parser.add_argument('note', nargs=argparse.REMAINDER,
                        help='The note to add')
    args = parser.parse_args()

    user = args.user

    try:
        pwd.getpwnam(user)
    except KeyError:
        print('User does not exist in LDAP')
        return 3

    try:
        with open(USER_INFO, 'r') as file:
            lines = file.readlines()
    except IOError as e:
        print('Could not read User_Info:', e.strerror)
        return 4

    note = ' '.join(args.note)

    if args.topic is None:
        topic_guess = guess_topic(note)
        topic = input('What topic is this note about? [{}] '.format(topic_guess))
        if not topic:
            topic = topic_guess
    else:
        topic = args.topic

    staff = getpass.getuser()
    today = date.today().strftime('%Y-%m-%d')

    lines.append(user + ':' + today + ':' + staff + ':' + topic + ':' + note + '\n')
    lines.sort()

    try:
        with tempfile.NamedTemporaryFile(prefix='User_Info.bak.{}.'.format(getpass.getuser()),
                                         delete=False) as tmpfile:
            with open(USER_INFO, 'rb') as fin:
                tmpfile.write(fin.read())
    except IOError as e:
        print('Could not write backup:', e.strerror)
        return 6

    try:
        with open(USER_INFO, 'w') as file:
            for l in lines:
                file.write(l)
    except IOError as e:
        print('Could not write to User_Info:', e.strerror)
        return 5

    print('Note saved, a backup was saved in ' + tmpfile.name)


if __name__ == '__main__':
    sys.exit(main())
