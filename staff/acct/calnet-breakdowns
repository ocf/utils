#!/opt/venvs/ocf-utils/bin/python3.7
import argparse
import sys
from collections import defaultdict

from ldap3 import LEVEL
from ocflib.infra.ldap import ldap_ocf
from ocflib.infra.ldap import ldap_ucb
from ocflib.infra.ldap import OCF_LDAP_PEOPLE
from ocflib.infra.ldap import UCB_LDAP_PEOPLE
from progressbar import ProgressBar

# Settings
OCF_CALNET_UID = 'calnetUid'
CALNET_AFFILIATIONS = 'berkeleyEduAffiliations'
CALNET_AFFILIATES = frozenset(['AFFILIATE-TYPE-CONSULTANT',
                               'AFFILIATE-TYPE-LBLOP STAFF',
                               'AFFILIATE-TYPE-VISITING SCHOLAR',
                               'AFFILIATE-TYPE-VOLUNTEER',
                               'AFFILIATE-TYPE-HHMI RESEARCHER',
                               'AFFILIATE-TYPE-VISITING STU RESEARCHER',
                               'AFFILIATE-TYPE-LBL/DOE POSTDOC',
                               'AFFILIATE-TYPE-TEMP AGENCY',
                               'AFFILIATE-TYPE-COMMITTEE MEMBER',
                               'AFFILIATE-TYPE-STAFF OF UC/OP/AFFILIATED ORGS',
                               'AFFILIATE-TYPE-CONTRACTOR'
                               'AFFILIATE-TYPE-CONCURR ENROLL'])


def ldap_uid_filter(uids):
    """Build LDAP search filter matching given list of UIDs"""
    filterstr = '(|'
    for uid in uids:
        filterstr += ('(uid=' + str(uid) + ')')
    filterstr += ')'
    return filterstr


def get_ocf_entries(users=None, ldapfilter=None):
    """Get list of OCF LDAP entries with their CalNet UIDs"""
    if users:
        # get CalNet UIDs of specified users
        filterstr = ('(&(' + OCF_CALNET_UID + '=*)' +
                     ldap_uid_filter(users) + ')')
    else:
        # get all CalNet UIDs
        filterstr = '(' + OCF_CALNET_UID + '=*)'

    if ldapfilter:
        # add extra LDAP filter
        if not ldapfilter.startswith('('):
            ldapfilter = ('(' + ldapfilter + ')')
        filterstr = ('(&' + filterstr + ldapfilter + ')')

    with ldap_ocf() as c:
        c.search(OCF_LDAP_PEOPLE,
                 filterstr,
                 search_scope=LEVEL,
                 attributes=[OCF_CALNET_UID])
        entries = c.response

    return entries


def add_calnet_affiliations(ocf_entries):
    """Add CalNet affiliations to list of OCF LDAP entries"""
    if not ocf_entries:
        return []

    with ldap_ucb() as c:
        sys.stderr.write('Looking up {0} OCF LDAP entries in CalNet\n'.format(len(ocf_entries)))
        progress = ProgressBar(maxval=len(ocf_entries)).start()
        for (i, ocf_entry) in enumerate(ocf_entries):
            calnet_uid = int(ocf_entry['attributes'][OCF_CALNET_UID])
            try:
                c.search(UCB_LDAP_PEOPLE,
                         ldap_uid_filter([calnet_uid]),
                         search_scope=LEVEL,
                         attributes=[CALNET_AFFILIATIONS])
                calnet_entry = c.response[0]

                ocf_entry['attributes'][CALNET_AFFILIATIONS] = calnet_entry['attributes'][CALNET_AFFILIATIONS]
            except (IndexError, KeyError):
                # Not found in CalNet People OU
                ocf_entry['attributes'][CALNET_AFFILIATIONS] = []
            progress.update(i + 1)
    progress.finish()
    return ocf_entries


def get_calnet_affiliations(users=None, ldapfilter=None):
    """Get list of OCF LDAP entries and their CalNet affiliations"""
    return add_calnet_affiliations(get_ocf_entries(users, ldapfilter))


def summarize_affiliations(users=None):
    """Summarize active OCF membership affiliations from CalNet"""

    ldapfilter = '(!(loginshell=/opt/ocf/bin/sorry))'
    calnet_uids = set()
    affiliations = []
    for entry in get_calnet_affiliations(users, ldapfilter):
        calnet_uid = int(entry['attributes'][OCF_CALNET_UID])
        if calnet_uid not in calnet_uids:
            # CalNet UID is unique
            calnet_uids.add(calnet_uid)
            affiliations.append(entry['attributes'][CALNET_AFFILIATIONS])

    affiliates = defaultdict(int)
    for affiliation in affiliations:
        if ('STUDENT-TYPE-REGISTERED' in affiliation and
                'STUDENT-STATUS-EXPIRED' not in affiliation):
            affiliates['students, registered'] += 1
        elif ('STUDENT-TYPE-NOT REGISTERED' in affiliation and
              'STUDENT-STATUS-EXPIRED' not in affiliation):
            affiliates['students, non-registered'] += 1
        elif ('EMPLOYEE-TYPE-ACADEMIC' in affiliation and
              'EMPLOYEE-STATUS-EXPIRED' not in affiliation):
            affiliates['faculty'] += 1
        elif ('EMPLOYEE-TYPE-STAFF' in affiliation and
              'EMPLOYEE-STATUS-EXPIRED' not in affiliation):
            affiliates['staff'] += 1
        elif (set(affiliation).intersection(CALNET_AFFILIATES) and
              'AFFILIATE-STATUS-EXPIRED' not in affiliation):
            affiliates['affiliates'] += 1
        else:
            affiliates['alumni'] += 1

    print('Affiliations of unique CalNet users with non-sorried OCF accounts')
    for key, value in affiliates.items():
        print('{}: {}'.format(key, value))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='get CalNet affiliations of OCF accounts')
    parser.add_argument('users', nargs='*', help='users to look up affiliations for')

    args = parser.parse_args()

    summarize_affiliations(args.users)
