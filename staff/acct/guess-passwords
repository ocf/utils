#!/usr/bin/env python3
"""Find users with guessable passwords.

This tool reads a password list from the web, then tries each password against
each of our unsorried accounts.

For best results, run this on the Kerberos host. It still takes forever.
"""
import argparse
import sys
from concurrent.futures import as_completed
from concurrent.futures import ProcessPoolExecutor

import pexpect
import requests
from ldap3.utils.conv import escape_filter_chars
from ocflib.account.search import SORRIED_SHELL
from ocflib.account.search import users_by_filter


def unsorried_users():
    return users_by_filter(
        '(&(uid=*)(!(loginShell={})))'.format(
            escape_filter_chars(SORRIED_SHELL)
        )
    )


def fast_password_matches(username, password):
    """Like ocflib.account.utils.password_matches, but faster."""
    cmd = 'kinit --no-forwardable -l0 {}@OCF.BERKELEY.EDU'.format(username)
    child = pexpect.spawn(cmd, timeout=10)

    child.expect("{}@OCF.BERKELEY.EDU's Password:".format(username))
    child.sendline(password)

    child.expect(pexpect.EOF)
    child.close()

    return child.exitstatus == 0


def check_user(user, passwords):
    for password in passwords:
        if fast_password_matches(user, password):
            return user, password
    else:
        return user, None


def main(argv=None):
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        '--list',
        default='https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/10_million_password_list_top_100.txt',  # noqa
    )
    args = parser.parse_args(argv)

    req = requests.get(args.list)
    assert req.status_code == 200, req.status_code
    passwords = [line.strip() for line in req.text.splitlines()]

    with ProcessPoolExecutor(max_workers=50) as ex:
        for future in as_completed(
            ex.submit(check_user, user, passwords) for user in unsorried_users()
        ):
            account, was_found = future.result()
            if was_found:
                print('{}'.format(account))


if __name__ == '__main__':
    sys.exit(main())
