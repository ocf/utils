#!/opt/venvs/ocf-utils/bin/python3.7
import os
import sys
from argparse import ArgumentParser
from collections import defaultdict
from subprocess import check_call
from subprocess import check_output

from lxml import etree
from ocflib.infra.hosts import hosts_by_filter
from ocflib.misc.mail import MAIL_ROOT
from ocflib.misc.mail import send_mail


def confirm_updates():
    output = check_output(('sudo', 'apt-dater', '-r')).decode('utf8')
    t = etree.fromstring(output)
    updates = t.xpath("//pkg[@hasupdate='1']")

    collected = defaultdict(list)

    for u in updates:
        collected[u.xpath('../..')[0].attrib['hostname']].append(
            '{name}: {old} --> {new}'.format(name=u.attrib['name'], old=u.attrib['version'], new=u.attrib.get('data')))

    body = ''

    for host in sorted(collected.keys()):
        body += host + '\n'
        updates = collected[host]
        for update in updates:
            body += '\t' + update + '\n'

    num_packages = sum(map(len, collected.values()))
    num_hosts = len(collected.keys())

    print('There are {packages} packages to update on {hosts} hosts.'.format(
        packages=num_packages,
        hosts=num_hosts,
    ))
    input('Press enter to continue...')
    print('Emailing root...')
    send_mail(
        MAIL_ROOT,
        '[apt-dater] package updates ({packages} pkgs / {hosts} hosts)'.format(
            packages=num_packages,
            hosts=num_hosts,
        ),
        body,
        sender='{} via apt-dater <root@ocf.berkeley.edu>'.format(
            os.environ.get('SUDO_USER', 'root'),
        ),
    )


def main(argv=None):
    parser = ArgumentParser(description='Run apt-dater on all OCF hosts.')
    parser.parse_args()

    if os.geteuid() != 0:
        print('You are not root.', file=sys.stderr)
        return 1

    groups = [
        # multiple groups are annoying, so we put them all in one
        ('ocf', hosts_by_filter('(cn=*)')),
    ]

    # write hosts file
    hosts_path = os.path.expanduser('~/.config/apt-dater/hosts.xml')
    tree = etree.parse('/etc/apt-dater/hosts.xml')
    root = tree.getroot()
    root.clear()
    etree.SubElement(root, 'default', attrib={'ssh-user': 'apt-dater'})
    for group, hosts in groups:
        group_tree = etree.SubElement(root, 'group', attrib={'name': group})
        for host in hosts:
            etree.SubElement(group_tree, 'host', attrib={'name': host['cn'][0]})

    with open(hosts_path, 'wb') as f:
        tree.write(f, method='xml')

    # write config
    tree = etree.parse('/etc/apt-dater/apt-dater.xml')
    tree.find('paths').set('hosts-file', hosts_path)
    with open(os.path.expanduser('~/.config/apt-dater/apt-dater.xml'), 'wb') as f:
        tree.write(f, method='xml', xml_declaration=True)

    check_call(('kinit', '-t', '/root/apt-dater.keytab', 'apt-dater'))
    confirm_updates()
    check_call(('apt-dater'))


if __name__ == '__main__':
    sys.exit(main())
