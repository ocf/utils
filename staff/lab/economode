#!/opt/venvs/ocf-utils/bin/python3
"""Change the economode setting on the printers."""
import argparse
import getpass
import sys

import lxml.html
import requests
import urllib3
from ocflib.misc.shell import green
from ocflib.misc.shell import red
from ocflib.printing.printers import PRINTERS


class Printer:

    def __init__(self, server):
        self.session = requests.Session()
        # Don't verify the self-signed SSL certificate
        self.session.verify = False
        self.server = server
        self.logged_in = False

    def __enter__(self):
        self.session.__enter__()
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        if self.logged_in:
            self.log_out()
        self.session.__exit__()

    def log_in(self, password):
        """Logs in to the printer and returns whether that succeeded."""
        resp = self.session.post('https://' + self.server +
                                 '/hp/device/SignIn/Index',
                                 data={'agentIdSelect': 'hp_EmbeddedPin_v1',
                                       'PinDropDown': 'AdminItem',
                                       'PasswordTextBox': password})
        if '<h2>Sign In failed</h2>' in resp.text:
            return False
        else:
            self.logged_in = True
            return True

    def log_out(self):
        """Logs out from the printer."""

        self.session.get('https://' + self.server + '/hp/device/SignIn/Leave')
        self.logged_in = False

    def get_print_quality_opts(self):
        """Gets the current print quality options as a dictionary of
        form option name -> form option value."""

        resp = self.session.get('https://' + self.server +
                                '/hp/device/MenuTree/IndexForm?id=PrintQuality')
        tree = lxml.html.fromstring(resp.content)
        opts = {}
        for select_elem in tree.xpath('//form//select'):
            val = select_elem.xpath('option[@selected]/@value')[0]
            opts[select_elem.name] = val
        return opts

    def change_economode(self, setting):
        """Changes the economode setting on the printer and returns whether
        that succeeded.

        'setting' must be "On" or "Off"."""

        if not self.logged_in:
            raise ValueError('You must log in first')
        if setting not in ('On', 'Off'):
            raise ValueError('setting must be "On" or "Off"')

        # We must fetch the current option values and re-submit them, or else
        # the printer will set the options other than economode to the wrong
        # values
        opts = self.get_print_quality_opts()
        opts['Economode__mEconomodeListBox'] = setting
        opts['FormButtonSubmit'] = 'OK'
        resp = self.session.post('https://' + self.server +
                                 '/hp/device/MenuTree/IndexForm?id=PrintQuality',
                                 data=opts)
        return '<h2>The operation was executed successfully.</h2>' in resp.text


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('setting', choices=('on', 'off'), help='economode setting')
    args = parser.parse_args()

    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    # Prompt for password
    password = getpass.getpass('Enter printer password: ')

    for printer_name in PRINTERS:
        print('Setting economode to {} for {}...'.format(args.setting, printer_name),
              end=' ')
        sys.stdout.flush()
        with Printer(printer_name) as printer:
            if not printer.log_in(password):
                print(red('Error:'), 'the password is not correct. Try again.')
                return 1
            if printer.change_economode(args.setting.title()):
                print(green('OK'))
            else:
                print(red('Failure'))
                return 1


if __name__ == '__main__':
    sys.exit(main())
