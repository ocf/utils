#!/usr/bin/env python3
'''
Deploys Kubernetes templates from the given directory. Creates a namespace
based on the app name, and runs kubernetes-deploy.
'''
import argparse
import json
import os
import subprocess
import sys
import tempfile
import textwrap

import yaml


SECRET_RESOURCE_TEMPLATE = '''
apiVersion: v1
kind: Secret
metadata:
  name: {name}
type: Opaque
stringData:
{string_data}
'''

STRINGDATA_SECRET_TEMPLATE = '''
{name}: |2
{value}
'''


def get_current_context():
    return subprocess.check_output(
        ['kubectl', 'config', 'current-context']
    ).decode().strip()


def get_kubeconfig_path():
    return os.environ.get('KUBECONFIG', os.path.expanduser('~/.kube/config'))


def get_kubernetes_dir():
    root_dir = subprocess.check_output(
        ['git', 'rev-parse', '--show-toplevel']
    ).decode().strip()
    return os.path.join(root_dir, 'kubernetes')


def write_secret_resource(name, secrets):
    string_data = '\n'.join(
        STRINGDATA_SECRET_TEMPLATE.format(
            name=filename,
            value=textwrap.indent(contents, ' ' * 2),
        ) for filename, contents in secrets.items()
    )
    yaml_contents = SECRET_RESOURCE_TEMPLATE.format(
        name=name,
        string_data=textwrap.indent(string_data, ' ' * 2),
    )
    open(os.path.join(
        get_kubernetes_dir(),
        'ocf-kubernetes-deploy-secret-{}.yaml.erb'.format(name),
    ), 'w').write(yaml_contents)


def main():
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument(
        '--kube-context',
        default=get_current_context(),
        help='The Kubernetes context to use. Defaults to the current context.',
    )

    parser.add_argument(
        'appname',
        help='''
             The name of the app to deploy. The namespace will be called
             "app-{appname}".
        ''',
    )

    # This argument is optional because some Kubernetes services
    # (sourcegraph) don't need us to build our own Docker images
    parser.add_argument(
        'appversion',
        nargs='?',
        default='',
        help='The version of the app, usually the docker tag.',
    )

    parser.add_argument(
        '--secrets',
        default='/etc/ocf-kubernetes/secrets/',
        help='The YAML file or directory of YAML files of Kubernetes secrets.',
    )
    args = parser.parse_args()

    # Kubernetes namespaces can't have underscores
    namespace_name = 'app-' + args.appname.replace('_', '-')

    # Make the namepace "app-appname"
    j = {
        'apiVersion': 'v1',
        'kind': 'Namespace',
        'metadata': {'name': namespace_name},
    }
    subprocess.run(
        ['kubectl', 'apply', '-f', '-'],
        input=json.dumps(j).encode(),
    ).check_returncode()

    # Bindings passed into the kubernetes-deploy templates
    bindings = {'version': args.appversion}

    if os.path.isfile(args.secrets):
        filename = args.secrets
    else:
        filename = os.path.join(args.secrets, args.appname + '.yaml')

    try:
        with open(filename, 'r') as stream:
            bindings.update(yaml.safe_load(stream))
    except FileNotFoundError:
        print('Secrets file not found')

    secret_template_dir = os.path.join(get_kubernetes_dir(), 'secrets')
    if os.path.isdir(secret_template_dir):
        secret_templates = os.listdir(secret_template_dir)
        # each subdirectory corresponds to one secret resource
        for secret_name in secret_templates:
            subdir = os.path.join(secret_template_dir, secret_name)
            if os.path.isdir(subdir):
                # each file corresponds to a single kv pair in the
                # secret resource
                secrets = {
                    # strip .erb from name
                    name[:-4]: open(os.path.join(subdir, name)).read()
                    for name in os.listdir(subdir)
                    if name.endswith('.erb')
                }
                write_secret_resource(secret_name, secrets)

    # Created with 600 perms
    with tempfile.NamedTemporaryFile(suffix='.json') as bindings_file:

        bindings_file.write(json.dumps(bindings).encode())

        # ensure the file gets written to
        bindings_file.flush()

        subprocess.run([
            'kubernetes-deploy',
            namespace_name,
            args.kube_context,
            '--bindings=@' + bindings_file.name,
            '--template-dir=' + get_kubernetes_dir(),
        ]).check_returncode()


if __name__ == '__main__':
    try:
        sys.exit(main())
    except subprocess.CalledProcessError as err:
        sys.exit(err.returncode)
