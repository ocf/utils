#!/opt/venvs/ocf-utils/bin/python3
"""
Force the Disable Comments plugin onto an existing Wordpress install.

This should be run as the appropriate user. Try:

    sudo -u someuser bludgeon /path/to/user/wp

The user's MySQL password will be read out of wp-config.php.
"""
import argparse
import getpass
import logging
import os
import re
from os.path import expanduser
from os.path import expandvars
from os.path import join
from subprocess import CalledProcessError
from subprocess import check_output
from subprocess import PIPE
from subprocess import Popen
from subprocess import STDOUT

# Load it in main
logger = logging.getLogger(__name__)


class MySQL:

    def __init__(self, user, password, options_table):
        self.query = """\
REPLACE INTO `{}` (`option_name`, `option_value`, `autoload`) \
VALUES ('disable_comments_options','a:4:{{s:19:\"disabled_post_types\";a:3:\
{{i:0;s:4:\"post\";i:1;s:4:\"page\";i:2;s:10:\"attachment\";}}s:17:\"remove_everywhere\";\
b:1;s:9:\"permanent\";b:0;s:10:\"db_version\";i:5;}}','yes');""".format(options_table)
        self.user = user
        self.password = password

    def disable_comments(self):
        p = Popen(
            [
                'mysql',
                '-u{}'.format(self.user),
                '-p{}'.format(self.password),
                self.user
            ],
            stdin=PIPE,
        )
        p.communicate(input=self.query.encode('ascii'))


class Wordpress:

    class Module:

        def __init__(self, parent, name):
            self.parent = parent
            self.name = name

        def _call(self, action_name, *args, **kwargs):
            return self.parent._call(self.name, action_name, *args, **kwargs)

        def __getattr__(self, name):
            def callable(*args, **kwargs):
                return self._call(name.replace('_', '-'), *args, **kwargs)
            return callable

    def __init__(self, wp_path):
        self.wpcli_bin = '/usr/local/bin/wp'

        self.wp_path = expandvars(expanduser(wp_path))
        logger.info('Wordpress install at {}'.format(self.wp_path))

        os.chdir(self.wp_path)

    def _call(self, mod_name, action_name, *args, **kwargs):
        kwargs = [
            '--{option_name}'.format(
                option_name=option_name,
            ) if option_value is True else
            "--{option_name}=\"{option_value}\"".format(
                option_name=option_name,
                option_value=option_value,
            )
            for option_name, option_value in kwargs.items()
        ]
        kwargs = ' '.join(kwargs)
        if any(kwargs):
            kwargs = ' ' + kwargs

        args = ' '.join(map(str, args))
        if any(args):
            args = ' ' + args

        cmd = '{bin} {module} {action}{kwargs}{args}'.format(
            bin=self.wpcli_bin,
            module=mod_name,
            action=action_name,
            kwargs=kwargs,
            args=args,
        )
        logger.debug(cmd)

        try:
            return check_output(cmd, shell=True, stderr=STDOUT).decode('ascii').strip()
        except CalledProcessError as ex:
            map(logger.error, ex.output.strip().split('\n'))
            raise Exception('Error raised by WP-CLI')

    def __getattr__(self, name):
        """Create a callable which proxies through to WP-CLI.
        """
        return Wordpress.Module(self, name)


def get_mysql_password(path):
    """Attempt to read MySQL password from wp-config.php. Possibly dangerous
    against a malicious WordPress install, but so is wp-cli."""

    config_path = join(path, 'wp-config.php')
    if not os.path.isfile(config_path):
        raise Exception("Can't find WordPress installation.")

    code = "require('" + config_path + "'); echo DB_PASSWORD;"
    return check_output(['php', '-r', code]).decode('ascii')


def main():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument('path', help='Filesystem path to a Wordpress installation')

    args = parser.parse_args()

    if os.geteuid() == 0:
        parser.error('This utility should *not* be run as root.')

    wp = Wordpress(args.path)

    logger.info('Wordpress version {}'.format(wp.core.version()))

    # Don't check, just install.
    logger.info('Installing Disable Comments plugin')
    map(
        logger.info,
        wp.plugin.install('disable-comments', activate=True).strip().split('\n'),
    )

    # Update it too, just in case.
    logger.info('Updating Disable Comments plugin')
    map(
        logger.info,
        wp.plugin.update('disable-comments').strip().split('\n'),
    )

    mysql_user = getpass.getuser()
    logger.info('Using current user {} as MySQL user'.format(mysql_user))

    mysql_password = get_mysql_password(args.path)
    logger.info('Read MySQL password from wp-config.php')

    options_table = re.search('\w+options', wp.db.tables()).group(0)
    logger.info('Options table is {}'.format(options_table))

    mysql = MySQL(mysql_user, mysql_password, options_table)

    logger.info('Writing plugin settings')
    mysql.disable_comments()


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG, format='[%(levelname)s] %(message)s')
    main()
