#!/usr/bin/env python3
import argparse
import json
import sys
from datetime import datetime

from ocflib.account.search import user_exists
from ocflib.account.search import user_is_group
from ocflib.misc.shell import bold
from ocflib.misc.shell import green
from ocflib.misc.shell import red
from ocflib.misc.shell import yellow
from ocflib.misc.whoami import current_user
from ocflib.printing.quota import add_refund
from ocflib.printing.quota import get_connection
from ocflib.printing.quota import get_quota
from ocflib.printing.quota import Refund


def staff_creds():
    """Return dictionary of staff creds, if we can read them."""
    return json.load(open('/etc/ocfprinting.json'))


def view(args):
    with get_connection() as c:
        quota = get_quota(c, args.user)

    def highlight(num, text, warning_level):
        if num > warning_level:
            color = green
        elif 0 < num <= warning_level:
            color = yellow
        else:
            color = red
        return bold('  ' + color('â†’ {}{}'.format(num, text)))

    print('{} printing quota:'.format(bold(quota.user)))
    if not user_is_group(quota.user):
        print(highlight(quota.semesterly, ' remaining this semester', 30))
        print(highlight(quota.daily, ' remaining today', 5))
    else:
        print(bold(red("Group accounts can't print. Sorry!")))


def refund(args):
    with get_connection() as c:
        quota = get_quota(c, args.user)
        
    refund = Refund(
        user=args.user,
        time=datetime.now(),
        pages=args.pages,
        staffer=current_user(),
        reason=args.reason,
    )

    if refund.pages < 0:
        prompt = bold('Are you sure you want to revoke {} pages from {}? [yN] '.format(-refund.pages, refund.user))
        if input(prompt) not in {'y', 'yes'}:
            print('Cancelled.')
            return
        if -refund.pages > quota.daily:
            prompt = bold('This will make the user\'s pagecount negative. Are you sure? [yN]')
            if input(prompt) not in {'y', 'yes'}:
                print('Cancelled.')
                return
        

    try:
        credentials = staff_creds()
    except FileNotFoundError:
        print(red('Could not find the file for staff credentials.'))
        print(red('Are you running this on supernova?'))
        return 1

    with get_connection(**credentials) as c:
        add_refund(c, refund)

    print(bold('Refunded {} pages to {}.'.format(refund.pages, refund.user)))


def main(argv=None):
    commands = {
        'view': view,
        'refund': refund,
    }

    parser = argparse.ArgumentParser(description='View and manipulate page quotas.')
    subparsers = parser.add_subparsers(dest='command', help='command to run')
    subparsers.required = True

    parser_view = subparsers.add_parser('view', help="view a user's print quota")
    parser_view.add_argument('user', nargs='?', type=str, default=None)

    parser_refund = subparsers.add_parser('refund', help="refund a user's pages")
    parser_refund.add_argument('--pages', '-p', type=int)
    parser_refund.add_argument('--reason', '-r', type=str)
    parser_refund.add_argument('user', nargs='?', type=str, default=None)

    if len(argv or sys.argv[1:]) == 0:
        reponse = input(bold('Refund(r) or view(v)? [rV] '))
        if reponse in {'r', 'R', 'refund'}:
            argv = ['refund']
        elif reponse in {'v', 'V', 'view'}:
            argv = ['view']
        else:
            print(bold(red('Invalid input.')))
            print('Defaulting to view.')
            argv = ['view']
    args = parser.parse_args(argv)

    if not args.user:
        response = input(bold('Input Username: '))
        if not len(response):
            response = current_user()
        args.user = response

    if not user_exists(args.user):
        print(bold(red("The user {} doesn't exist.".format(args.user))))
        return 1

    if args.command == 'refund':
        if not args.pages:
            response = input(bold('Number of Pages: '))
            try:
                args.pages = int(response)
            except ValueError:
                print(bold(red("Invalid int value: {}".format(response))))
                return 1

        if not args.reason:
            response = input(bold('Reason: '))
            args.reason = response
    
    return commands[args.command](args)


if __name__ == '__main__':
    sys.exit(main())