#!/usr/bin/env python3
import argparse
import json
import sys
from datetime import datetime

from ocflib.account.search import user_exists
from ocflib.account.search import user_is_group
from ocflib.misc.shell import bold
from ocflib.misc.shell import green
from ocflib.misc.shell import red
from ocflib.misc.shell import yellow
from ocflib.misc.whoami import current_user
from ocflib.printing.quota import add_adjustment
from ocflib.printing.quota import get_connection
from ocflib.printing.quota import get_quota
from ocflib.printing.quota import Payload


def staff_creds():
    """Return dictionary of staff creds, if we can read them."""
    return json.load(open('/etc/ocfprinting.json'))


def view(args):
    with get_connection() as c:
        quota = get_quota(c, args.user)

    def highlight(num, text, warning_level):
        if num > warning_level:
            color = green
        elif 0 < num <= warning_level:
            color = yellow
        else:
            color = red
        return bold('  ' + color('â†’ {}{}'.format(num, text)))

    print('{} printing quota:'.format(bold(quota.user)))
    if not user_is_group(quota.user):
        print(highlight(quota.semesterly, ' remaining this semester', 30))
        print(highlight(quota.daily, ' remaining today', 5))
    else:
        print(bold(red("Group accounts can't print. Sorry!")))


def adjust(args):
    payload = Payload(
        user=args.user,
        time=datetime.now(),
        pages=args.pages,
        action=args.command,
        staffer=current_user(),
        reason=args.reason,
    )

    stringtype = 'Refund' if payload.action == 'refund' else 'Forward'
    prompt = bold('{} +  {} pages to {}? [yN] '.format(stringtype, payload.pages, payload.user))
    if input(prompt) not in {'y', 'yes'}:
        print('Cancelled.')
        return
    try:
        credentials = staff_creds()
    except FileNotFoundError:
        print(red('Could not find the file for staff credentials.'))
        print(red('Are you running this on supernova?'))
        return 1
    with get_connection(**credentials) as c:
        add_adjustment(c, payload)
    print('Added.')


def main(argv=None):
    commands = {
        'view': view,
        'refund': adjust,
        'forward': adjust,
    }

    parser = argparse.ArgumentParser(description='View and manipulate page quotas.')
    subparsers = parser.add_subparsers(dest='command', help='command to run')
    subparsers.required = True

    parser_view = subparsers.add_parser('view', help="view a user's print quota")
    parser_view.add_argument('user', nargs='?', type=str, default=current_user())

    parser_refund = subparsers.add_parser('refund', help="refund a user's pages")
    parser_refund.add_argument('--pages', '-p', required=True, type=int)
    parser_refund.add_argument('--reason', '-r', required=True, type=str)
    parser_refund.add_argument('user', type=str)

    parser_forward = subparsers.add_parser('forward', help="allow a user to print above today's quota")
    parser_forward.add_argument('--pages', '-p', required=True, type=int)
    parser_forward.add_argument('--reason', '-r', required=True, type=str)
    parser_forward.add_argument('user', type=str)

    if len(argv or sys.argv[1:]) == 0:
        args = parser.parse_args(['view'])
    else:
        args = parser.parse_args(argv)

    if not user_exists(args.user):
        print(bold(red("The user {} doesn't exist.".format(args.user))))
        return 1

    return commands[args.command](args)


if __name__ == '__main__':
    sys.exit(main())
