#!/usr/bin/env python3
"""Change the economode setting on the printers."""
import argparse
import getpass
import sys

import lxml.html
import requests
import urllib3
from ocflib.misc.shell import green
from ocflib.misc.shell import red
from ocflib.printing.printers import PRINTERS
from urllib3.exceptions import TimeoutError


class Printer:

    def __init__(self, server):
        self.session = requests.Session()
        # Don't verify the self-signed SSL certificate
        self.session.verify = False
        self.server = server
        self.logged_in = False

    def __enter__(self):
        self.session.__enter__()
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        if self.logged_in:
            self.log_out()
        self.session.__exit__()

    def log_in(self, password):
        """Logs in to the printer and returns whether that succeeded."""
        resp = self.session.get('https://' + self.server +
                                '/hp/device/SignIn/Index')
        tree = lxml.html.fromstring(resp.content)
        token = tree.get_element_by_id('CSRFToken')
        resp = self.session.post('https://' + self.server +
                                 '/hp/device/SignIn/Index',
                                 data={'CSRFToken': token,
                                       'agentIdSelect': 'hp_EmbeddedPin_v1',
                                       'PinDropDown': 'AdminItem',
                                       'PasswordTextBox': password})
        if '<h2>Sign-In failed</h2>' in resp.text:
            return False
        else:
            self.logged_in = True
            return True

    def log_out(self):
        """Logs out from the printer."""

        self.session.get('https://' + self.server + '/hp/device/SignIn/Leave')
        self.logged_in = False

    def get_print_quality_opts(self):
        """Gets the current print quality options as a dictionary of
        form option name -> form option value."""

        resp = self.session.get('https://' + self.server +
                                '/hp/device/DefaultPrintOptions/Index')
        tree = lxml.html.fromstring(resp.content)
        opts = {}
        for select_elem in tree.xpath('//form//select'):
            val = select_elem.xpath('option[@selected]/@value')[0]
            opts[select_elem.name] = val
        return opts

    def get_csrf_token(self):
        """Gets the CSRF token."""

        resp = self.session.get('https://' + self.server +
                                '/hp/device/PrintQuality/Index')
        tree = lxml.html.fromstring(resp.content)
        value = tree.get_element_by_id('CSRFToken')
        return value

    def change_economode(self, setting):
        """Changes the economode setting on the printer and returns whether
        that succeeded. For both versions of the HP firmware.

        'setting' must be "On" or "Off"."""

        if not self.logged_in:
            raise ValueError('You must log in first')
        if setting not in ('On', 'Off'):
            raise ValueError('setting must be "On" or "Off"')
        token = self.get_csrf_token().value
        opts = self.get_print_quality_opts()
        opts['CSRFToken'] = token
        opts['NumberOfCopies'] = '1'
        opts['XDimension'] = '12.28'
        opts['YDimension'] = '18.5'
        opts['UseInches'] = 'on'
        opts['PrintQualityMode'] = 'Economode' if setting == 'On' else 'Normal'
        opts['FormButtonSubmit'] = 'Apply'
        resp = self.session.post('https://' + self.server +
                                 '/hp/device/DefaultPrintOptions/Save',
                                 data=opts)
        return '<h2>The operation was completed successfully.</h2>' in resp.text


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('setting', choices=('on', 'off'), help='economode setting')
    args = parser.parse_args()

    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    # Prompt for password
    password = getpass.getpass('Enter printer password: ')

    for printer_name in PRINTERS:
        print('Setting economode to {} for {}...'.format(args.setting, printer_name),
              end=' ')
        sys.stdout.flush()
        with Printer(printer_name) as printer:
            try:
                printer.log_in(password)
                if not printer.logged_in:
                    print(red('Error:'), 'the password is not correct. Try again.')
                    return 1
                if printer.change_economode(args.setting.title()):
                    print(green('OK'))
                else:
                    print(red('Failure'))
                    return 1
            except (OSError, TimeoutError) as e:
                # If no route to host (e.g. out of rotation) or timeout, we still
                # want to set economode on other printers
                print(red('Failure'))
                print(e)


if __name__ == '__main__':
    sys.exit(main())
