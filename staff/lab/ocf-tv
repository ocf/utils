#!/usr/bin/env python3
import argparse
import random
import socket
import subprocess
import sys
import time

TV_CARD = 'alsa_output.pci-0000_00_03.0'
TUNNEL_NAME = 'ocf-tv-remote'

GET_TV_SINK_CMD = "pactl list short sinks | cut -f2 | grep -F '{}'".format(TV_CARD)


def get_tv_sink(host):
    pactl_proc = subprocess.run(('ssh', host, GET_TV_SINK_CMD), capture_output=True)
    return pactl_proc.stdout.decode().strip()


def unused_port():
    """Find an unused port to bind the listener against on our side."""

    def used(port):
        s = socket.socket()
        try:
            s.bind(('127.0.0.1', port))
        except Exception:
            return True
        else:
            s.close()
            return False

    port = None
    while port is None or used(port):
        port = random.randint(10000, 65535)

    return port


def wait_for_port(host, port, timeout=5, ssh_proc=None):
    """Try to acquire a socket on our side againt the specified host/port."""

    spent = 0
    while True:
        if ssh_proc and ssh_proc.poll():
            raise ChildProcessError('SSH exited too quickly. Maybe run kinit?')

        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            if s.connect_ex((host, port)) == 0:
                return
        time.sleep(0.1)
        spent += 0.1

        if spent > timeout:
            raise TimeoutError('Timed out after {} seconds.'.format(timeout))


def tunnel_to_host(local_port, remote_port, remote_host):
    """Open an SSH local port forward tunnel to the remote host."""

    return subprocess.Popen(['ssh', '-N', '-o', 'ExitOnForwardFailure=yes',
                             '-o', 'BatchMode=yes',
                             '-L', '{}:localhost:{}'.format(local_port, remote_port), remote_host])


def open_vnc(args):
    """Start xvncviewer against tunneled port 5900 on the remote host."""

    port = unused_port()
    proc = tunnel_to_host(port, 5900, args.host)

    try:
        wait_for_port('localhost', port, ssh_proc=proc)
        subprocess.call(['xvncviewer', 'localhost:{}'.format(port)])
    finally:
        proc.terminate()
        proc.wait()


def create_audio_tunnel(local_port=4710):
    """Start a PulseAudio network sink, tunneled to the TV."""

    try:
        # unload preexisting tunnel sinks if they're there because otherwise
        # pulse will just create a new one with the name incremented
        ret = subprocess.call('pactl list sinks '
                              "| grep -qE 'Name: {}$'".format(TUNNEL_NAME),
                              shell=True)
        if ret == 0:
            close_audio_tunnel()

        # set up an explicit tunnel sink that points to the local end of our SSH tunnel
        # if this succeeds, it should return a loaded module index, e.g. '25' that
        # you can see by running `pactl list modules`
        ret = subprocess.check_call(('pactl', 'load-module', 'module-tunnel-sink-new',
                                     'server=tcp:localhost:{}'.format(local_port),
                                     'sink_name=' + TUNNEL_NAME), stdout=subprocess.DEVNULL)

        ret = subprocess.check_call(('pactl', 'set-default-sink', TUNNEL_NAME))

        # move everything that's currently playing to the new sink
        cmd = "pacmd list-sink-inputs \
              | awk '/index: / { print $2 }' \
              | xargs -I {} pacmd move-sink-input {} " + TUNNEL_NAME

        subprocess.check_call(cmd, shell=True)

    except Exception as e:
        print(e)
        exit(1)


def close_audio_tunnel():
    """Unload the PulseAudio network sink on our side."""

    return subprocess.call(('pactl', 'unload-module', 'module-tunnel-sink-new'),
                           stdout=subprocess.DEVNULL)


def tunnel_audio(args):
    """Start the audio tunnel session with the ability to change volume on the fly."""

    port = unused_port()
    proc = tunnel_to_host(port, 4713, args.host)

    try:
        wait_for_port('localhost', port, ssh_proc=proc)
        create_audio_tunnel(port)
        while True:
            try:
                get_volume(args.host)
                vol = input('Enter new volume or q to quit: ')
                if vol in ('q', 'quit'):
                    break
                else:
                    set_volume(check_volume(vol), args.host)
            except (argparse.ArgumentTypeError, ValueError) as e:
                print(e)
    finally:
        close_audio_tunnel()
        proc.terminate()
        proc.wait()


def volume(args):
    """Get/set the PulseAudio volume of the TV sink on the remote host."""

    return set_volume(args.amount, args.host) if args.amount is not None else get_volume(args.host)


def check_volume(val):
    x = int(val)
    if abs(x) > 150:
        raise argparse.ArgumentTypeError('Volume out of bounds: {} not in [0, 150]'.format(val))

    return val


def get_volume(host):
    pre = 'pactl list sinks'
    # print 5th field in 7th line after match, which contains volume info
    post = "awk '/Name: {}/ {{ target = NR + 7 }}; NR == target {{ print $5 }}'".format(TV_CARD)
    return subprocess.call(('ssh', host, '{} | {}'.format(pre, post)))


def set_volume(amount, host):
    cmd = 'pactl set-sink-volume $({}) {}%; '.format(GET_TV_SINK_CMD, amount)
    return subprocess.call(('ssh', host, cmd))


def mute(args):
    cmd = 'pactl set-sink-mute $({}) toggle'.format(GET_TV_SINK_CMD)
    return subprocess.call(('ssh', args.host, cmd))


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description='Control the OCF television.',
    )

    parser.add_argument('-H', '--host', type=str, default='tv', help='set host (default tv)')

    command_subparser = parser.add_subparsers(dest='command')

    subparser_connect = command_subparser.add_parser(
        'connect',
        help='open a vnc instance to view the TV screen',
    )
    subparser_connect.set_defaults(func=open_vnc)

    subparser_tunnel_audio = command_subparser.add_parser(
        'tunnel-audio',
        help='Create a PulseAudio tunnel to the TV and transfer'
             'all local sink inputs to that tunnel',
        aliases=['tunnel', 't', 'audio'],
    )
    subparser_tunnel_audio.set_defaults(func=tunnel_audio)

    subparser_volume = command_subparser.add_parser(
        'volume',
        help="set the volume on the TV's primary PulseAudio sink",
        aliases=['vol', 'v'],
    )

    subparser_volume.add_argument(
        'amount',
        type=check_volume,
        nargs='?',
        help='volume in percent between 0% and 150%.'
             ' +/- a relative value is also allowed.',
    )
    subparser_volume.set_defaults(func=volume)

    subparser_mute = command_subparser.add_parser(
        'mute',
        help='Toggle mute on the TV',
    )
    subparser_mute.set_defaults(func=mute)

    if len(sys.argv) == 1:
        args = parser.parse_args(['connect'])
    else:
        args = parser.parse_args()  # default is sys.argv

    args.func(args)
