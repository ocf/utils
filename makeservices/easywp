#!/bin/bash

# Creates symlink to user's webroot. If the symlink exists and files
# are present in webroot, they are backed up in the user's home directory.
# A user's database is created or, if it already exists, the password
# is reset. WordPress is installed and the wp-config file is filled
# out with the requisite information. Further configuration can be
# done by the user from a browser.
#

set -euo pipefail
shopt -s dotglob

if ! [[ "$(hostname)" =~ (dev-)?tsunami ]]; then
    echo -e '\033[1;31mYou must run this command on tsunami.\033[0m'
    exit 1
fi

echo -e "\\033[33mWARNING: This script should generally be run on a fresh account!\\033[00m"
echo -e "A user with an existing website or database will have their files
backed up, but their database password will change and the WordPress
install may migrate and reuse existing tables.\\n"

read -rp "Are you sure you want to continue? [y/N] " idunno
idunno=${idunno,,}
if ! [[ "$idunno" =~ ^(yes|y) ]]; then
    echo "Ok, bye!"
    exit 0
fi

webroot=$HOME/public_html
user=$(whoami)

# Create symlink to webroot
makehttp
cd "$webroot"

# Check if user has files and let user decide what they want to do.
if [[ -n "$(ls -A)" ]]; then
    echo
    echo -e "\\033[33mThere are currently files in webroot! These will be backed up.\\033[00m\\n"
    read -rp "Do you want to continue? [y/N] " whoknows

    whoknows=${whoknows,,}
    if [[ "$whoknows" =~ ^(yes|y) ]]; then
        ts=$(date +"%Y-%m-%d_%H:%M:%S")
        backup="$HOME/public_html-$ts"
        mkdir -p "$backup"
        echo "Moving current files to $backup ..."
        # Note that dotglob is set so hidden files are moved too
        mv ./* "$backup"
    else
        echo "Ok, bye!"
        exit 0
    fi
fi

# Get SQL password
echo "Resetting database password..."
# Do not exit immediately if makemysql fails, as we need to display some error message...
set +e
sqlpass=$(makemysql --quiet)
# I don't know if this will work... Just make sure no abnormal exit code first!
if [[ $? -ne 0 ]] || [[ -z "$sqlpass" ]]; then
    echo -e "\\033[31mError:\\033[00m Could not retrieve database password. Run makemysql to see the issue."
    exit 1
fi
# Only have the aforementioned behaviour when running makemysql
# Note also technically if should be below this set statement
# but set messes up with $? as well...
set -e
echo "SQL set up and the password can be found in wp-config.php ..."

# Install WordPress and create config file
wp core download
wp config create --dbname="$user" --dbuser="$user" --dbpass="$sqlpass" --dbhost=mysql --dbcharset=utf8mb4
# Somehow 644 is the default... See https://core.trac.wordpress.org/ticket/37264
chmod 600 "$webroot/wp-config.php"

# This is the real install
echo "WordPress configuration creation successful. Setting it up..."

read -rp 'Enter your desired site title. (Default: newsite)' sitetitle
if [ -z "$sitetitle" ]; then
    sitetitle="newsite"
fi
read -rp 'Enter your desired admin username. (Default: admin)' adminname
if [ -z "$adminname" ]; then
    adminname="admin"
fi

echo "You admin e-mail will be '$(whoami)@ocf.berkeley.edu', the confirmation e-mail will not be sent to you."
echo "WP-CLI will install wordpress for you. If you wish, enter your desired admin password and press enter; if you want one to be randomly generated for you, press enter."
# Use --prompt so that password is not left in ~/.bash_history
wp core install --admin_user="$adminname" --admin_email="$(whoami)@ocf.berkeley.edu" --skip-email --title=$sitetitle --url="https://www.ocf.berkeley.edu/~$user/" --prompt=admin_password
# As we had `set -e`, installation must be complete as otherwise the script will end. If it is incomplete, people will still know as this step is verbose.

echo "Campus web security regulations require us to disable unauthenticated REST API. We will install a WordPress plug-in to do that.
      You may use other plug-ins that achieve the same thing, you may also disable or remove it afterwards, but it is your responsibility
      to ensure your site complies with regulations. Failure to do so may result in your account being suspended."
wp plugin install disable-json-api --activate
