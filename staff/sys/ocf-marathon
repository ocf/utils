#!/opt/venvs/ocf-utils/bin/python3
"""Control apps deployed via Marathon."""
import argparse
import code
import getpass
import json
import os.path
import sys
from operator import itemgetter

from ocflib.infra.mesos import marathon


def unbuf_print(*args, file=sys.stdout, **kwargs):
    print(*args, file=file, **kwargs)
    file.flush()


def shell(client, args):
    print("Here's a Python shell for you.")
    print('Some things you might find useful:')
    print('  * View app status:')
    print('      app_status(app_name)')
    print('  * Make API requests:')
    print("      get('/v2/apps/')")
    print('    (other verbs work too)')
    code.interact(local=dict(globals(), **locals()))


def list_apps(client, args):
    req = client.get('/v2/apps')

    for app in sorted(req.json()['apps'], key=itemgetter('id')):
        unbuf_print('{}: {} desired, {} healthy, {} unhealthy, {} staged'.format(
            app['id'].lstrip('/'),
            app['instances'],
            app['tasksHealthy'],
            app['tasksUnhealthy'],
            app['tasksStaged'],
        ))


def deploy_app(client, args):
    client.deploy_new_version(
        args.app,
        args.version,
        report=unbuf_print,
        force=args.force,
    )


def view_errors(client, args):
    status = client.app_status(args.app)
    json.dump(status['app']['lastTaskFailure'], sys.stdout, indent=True)


def scale_app(client, args):
    client.put(
        '/v2/apps/' + args.app,
        json={
            'instances': args.instances,
        },
    )


def main(argv=None):
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument('--marathon', default=marathon.MARATHON_URL)
    parser.add_argument('--user', default=getpass.getuser())
    parser.add_argument(
        '--cred-path',
        default=os.path.join(os.path.expanduser('~'), '.ocf-marathon'),
    )

    subparsers = parser.add_subparsers(help='subcommand', dest='command')
    subparsers.required = True

    # list apps
    subparsers.add_parser(
        'list-apps', help='list all applications',
    )

    # deploy app
    parser_deploy_app = subparsers.add_parser(
        'deploy-app', help='deploy an application version',
    )
    parser_deploy_app.add_argument(
        '--force', action='store_true',
        help='force deployment, even if one is in progress',
    )
    parser_deploy_app.add_argument('app')
    parser_deploy_app.add_argument(
        'version', help='docker tag',
    )

    # scale app
    parser_scale_app = subparsers.add_parser(
        'scale-app', help='scale an application',
    )
    parser_scale_app.add_argument(
        '--instances', '-i', type=int, required=True,
        help='desired number of instances',
    )
    parser_scale_app.add_argument('app')

    # view errors
    parser_view_errors = subparsers.add_parser(
        'view-errors', help='view stderr from a failed start',
    )
    parser_view_errors.add_argument('app')

    # shell
    subparsers.add_parser(
        'shell', help='drop into a Python shell',
    )

    # parse and dispatch
    args = parser.parse_args(argv)

    # this really kinda sucks
    marathon_url = args.marathon

    if os.path.isfile(args.cred_path):
        unbuf_print('Loading credentials from {}.'.format(args.cred_path))
        with open(args.cred_path) as f:
            creds = json.load(f)
        user = creds['user']
        password = creds['password']
    else:
        user = args.user
        password = getpass.getpass("{}'s password: ".format(user))

    client = marathon.MarathonClient(user, password, url=marathon_url)

    return {
        'deploy-app': deploy_app,
        'list-apps': list_apps,
        'scale-app': scale_app,
        'shell': shell,
        'view-errors': view_errors,
    }[args.command](client, args)


if __name__ == '__main__':
    sys.exit(main())
